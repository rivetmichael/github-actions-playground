on:
  push:
    branches:
      - main

name: test

env:
  SERVICE_NAME: ${{ vars.SERVICE_NAME || 'default' }}

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          export matrix=$(ls ./apps/session/{dev,stage}/*/local-values.yaml | jq -R -s -c 'split("\n")[:-1]')
          echo $matrix
          echo "date=$(date)" >> $GITHUB_OUTPUT
          echo "matrix=$(echo $matrix)" >> $GITHUB_OUTPUT
    
  checks:
    name: Test
    needs: [matrix]
    runs-on: ubuntu-latest
    outputs:
      service: ${{ steps.variables.outputs.service }}
      environment: ${{ steps.variables.outputs.environment }}
      tenant: ${{ steps.variables.outputs.servitenantce }}
    strategy:
      matrix:
        tenant: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - id: variables
        run: |
          export filename=${{ matrix.tenant }}  
          echo "service=$(echo $filename  | cut -d/ -f3)" >> $GITHUB_OUTPUT
          echo "environment=$(echo $filename  | cut -d/ -f4)" >> $GITHUB_OUTPUT
          echo "tenant=$(echo $filename  | cut -d/ -f5)" >> $GITHUB_OUTPUT
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          # environment-url: http://my-app-url.com
          environment: ${{ steps.variables.outputs.environment }}-${{ steps.variables.outputs.tenant }}
      - name: testing output ?!
        run: |
          echo ${{ steps.variables.outputs.tenant }}
      # - name: Adding markdown
      #   env:
      #     TENANT: ${{ steps.variables.outputs.tenant }}
      #   run: echo "## From tenant 🌍 $TENANT " >> $GITHUB_STEP_SUMMARY
      - run: |
          sleep 10
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'success'
      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'failure'